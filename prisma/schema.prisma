// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime? @db.Date
  bloodGroup  String?
  gender      String?
  password    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resetToken  String?
  resetTokenExpires DateTime?
  bookings    Booking[]   @relation("UserBookings")
  familyMembers FamilyMember[]
}

model FamilyMember {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  phoneNumber String?
  dateOfBirth DateTime? @db.Date
  bloodGroup  String?
  gender      String?
  relation    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Doctor {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  email             String   @unique
  phoneNumber       String?
  dateOfBirth       DateTime? @db.Date
  gender            String?
  bloodGroup        String?
  specialty         String
  registrationNumber String
  yearsOfExperience Int
  clinicName        String
  city              String
  clinicAddress     String
  consultationFee   Int @default(500)
  photoUrl          String?
  availability      Json?
  password          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  bookings          Booking[] @relation("DoctorBookings")
}



model Booking {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserBookings", fields: [userId], references: [id])
  doctorId  String
  doctor    Doctor   @relation("DoctorBookings", fields: [doctorId], references: [id])
  date      DateTime
  time      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
